#summary How to compile CBO

Our clone-based optimizations are implemented as passes on LLVM. This way, they can be compiled just like any other pass. For more information on how to compile a pass on LLVM, refer to the official guide:

http://llvm.org/docs/WritingAnLLVMPass.html

First, you should checkout our code. Considering your LLVM source code is on folder $LLVM_ROOT, you should do:

<code language="xml">
$ cd $LLVM_ROOT/lib/Transforms/
$ svn checkout http://clone-based-opts.googlecode.com/svn/trunk/ clone-based-opts</code>

After that, each of our optimization can be compiled as individual passes. The following folders in our project are llvm passes:

 * *add-noalias:* implements Pointer Disambiguation;
 * *clone-constant-args:* implements Constant Propagation;
 * *dead-store-elimination:* implements Dead-Stores Elimination;
 * *function-fusion:* implements Function Fusion;
 * *pur:* implements Elimination of Unused Return Values;
 * *static-profiler:* implements Wu and Laru's static profiler.